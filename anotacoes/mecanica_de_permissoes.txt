Antes de codificar de fato as permissoess é necessério ter em mente a regra de negócio do sistema,como se trata
de permissões basicamente antes de codificar deve estar claro quem pode fazer oque.No caso eu tenho 3 classes de 
usuarios, teste das gates ele não vai ter a funcionalidade de edição.


1 - administrador 
    pode exluir posts e contas de outras pessoas e os posts dele mesmo

2 - usuario 
    pode postar e pode excluir os seus posts

3 - visistante 
    só pode visualizar  

As gates que vão fazer esse teste ficam dentro do "AppServiceProvider.php" dentro dessas 
gates existe uma logica de teste oque vai definir se elas vão retornar true ou false
essa é a gate que dá a permissão de criação, ela vai recebre o usuario e retronar o
resultado de um teste pirmiro ela testa se o usuário é um administrador se não for 
ela vai parar o proximo teste verificar se ele é um usuario comum, ambos estão logados 
nesse contexto se o usuario forr um admin ele libera o botão de criação e se o usuario for 
um usuario comum ele também pode criar posts então essa gate restornar sim se uma dessa condições
for atendida.        

Gate::define('post.create',function(User $user){
            return($user->role === 'admin' || $user->role === 'normal_user');
        });

A segunda gate serve para liberar o botão de delete, mas ela também tem suas condições
se for um administrador o botão de deletar aparece em todos os posts, se for um usuario
comum sos aparece nos ports que ele mesmo criou.   

 Gate::define('post.delete',function(User $user,$post){
            return($user->role === 'admin' || $user->id === $post->user_id);
        });


public function boot(): void
    {
        //gate para rota de criação 
        Gate::define('post.create',function(User $user){
            return($user->role === 'admin' || $user->role === 'normal_user');
        });
        
        //gate para rota de deletar 
         Gate::define('post.delete',function(User $user,$post){
            return($user->role === 'admin' || $user->id === $post->user_id);
        });

      
    }
------------------------------------------------------------------------------------- 
Testando permissões direto na view o teste na verdade é bem simples a diretiva " @can " 
usa as Gates para testar se o usuario pode ou não ter acesso a um determinado componente
No codigo abaixo eu testo a gate "post.create" que vai testar se o usuario que esta logado 
no sistema pode te acesso ao botão de criação do post, se a Gate restronar true o botão aparece
e ele vai poder adicionar, agora se não o botão não vai existir na pagina.

-------------------------------------------------------------------------------------------------
  {{-- botão de criar post, só aparece para admin e normal user --}}
        @can('post.create')
           <div class="max-w-7xl mx-auto mb-6 px-8">
              <a href="{{ route('post.create') }}"  class="bg-blue-700 hover:bg-blue-900 text-white font-bold py-2 px-6 rounded">Create post</a>
           </div>
        @endcan
-------------------------------------------------------------------------------------------------------

Pra deixar mais facil para o usuario identificar posts que ele emesmo fez eu coloquei uma condicional dentro 
do componente do post, no caso eu uso um operador ternario para testar se o id do usuario que fez o post é 
igual ao id do usuario logado, se for ele fica com a acor de fundo azul claro.   

---------------------------------------------------------------------------------------------
<div class="{{ Auth::user()->id === $post->user_id ?"bg-blue-100":"bg-white" }} dark:bg-gray-800 over[flow-hidden shadow-sm sm:rounded-lg]">
--------------------------------------------------------------------------------------------------------------
